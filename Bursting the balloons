Approach 1 : Brute Force Approach
Time Complexity :Exponential
Space Complexity :
Approach 2 : Dynamic Programming by following sequence of bursting. Intution , have a decision making Array along with some order
Time Complexity :O(n*n*n)=O(n^3)
Space Complexity :
class Solution {
    public int maxCoins(int[] nums) {
        int n=nums.length;
        if(n==0) return 0;
        int [][] dp= new int[n][n];
        for(int len=1;len<=n;len++){//Decision Making Array of different lengths
            for(int i=0;i<=n-len;i++){// Starting Index of Decision Array
                int j=i+len-1;// Ending Index of Decision Array
                for(int k=i;k<=j;k++){// Bursting in the End
                   int left=1;
                    int right=1;
                    if(i!=0){
                        left=nums[i-1];
                    }
                    if(j!=n-1){
                        right=nums[j+1];
                    }                
                    int after=0;
                    int before=0;
                    if(k!=0){
                        before=dp[i][k-1];
                        
                    }
                    if(k!=n-1){
                        after=dp[k+1][j];                      
                    }
                    dp[i][j]=Math.max(dp[i][j],before+left*nums[k]*right+after);
                }
            }
            
        }
        return dp[0][n-1];
    }
}
